if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
}
i
View(i.tva)
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- "S:/groups/DMT/data/formatted_TVA/"
#back to script WD
setwd(wPath)
source("libTVA.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
View(i.tva)
filename = gsub(".csv", "", i)
filename
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "/", i), filepath = outputPath)
}
}
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub("", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub("", "", i), filepath = outputPath)
}
}
rm(list=ls())
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
tva.files
file = tva.files[11]
file = tva.files[12]
filepath = outputPath
i = file
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
x = i.tva
# Write trial number into the output file
output.name <- paste0(filepath, filename, ".dat")
exp_blocks <- subset(x, Block != 0) # Exclude practice trials
write.table(length(exp_blocks$Block), file = output.name, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "/t", append = FALSE)
filename = basename(file)
write.table(length(exp_blocks$Block), file = output.name, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "/t", append = FALSE)
# Write trial number into the output file
output.name <- paste0(filepath, filename, ".dat")
exp_blocks <- subset(x, Block != 0) # Exclude practice trials
write.table(length(exp_blocks$Block), file = output.name, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "/t", append = FALSE)
View(exp_blocks)
# Whole report data
tva_data <- subset(exp_blocks)
tva_data$Letter_duration <- tva_data$Letter_duration # Correct to represent actual presentation times
tva_data[, paste0("L", 1:4)] <- apply(tva_data[, paste0("L", 1:4)], 2, as.character)
## Reformat responses (this should be fixed in OpenSesame!)
tva_data$response <- toupper(tva_data$response) # Convert to upper case
tva_data$response <- gsub(" ", "", tva_data$response)
tva_data$response[tva_data$response == "NONE" | tva_data$response == ""] <- "-" # Code missing as "-"
## Sort targets by position (1-3 top left - bot left, 4-6 top right - bot right)
positions <- tva_data[, paste0("posLet", c(1:4))]
letters <- tva_data[, paste0("L", c(1:4))]
t1 <- t(letters)[t(positions == "top left")]
t2 <- t(letters)[t(positions == "bot left")]
t3 <- t(letters)[t(positions == "top right")]
t4 <- t(letters)[t(positions == "bot right")]
targets <- paste0(t1, t2, t3, t4)
distractors <- rep("000000", length(tva_data$Block)) # No distractors in whole report condition
## Combine variables that are needed for the TVA parameter estimate
whole_data <- cbind(
condition = tva_data$Timing
, letter_duration = tva_data$Letter_duration
, targets
, distractors
, response = tva_data$response
, eccentricity = tva_data$Eccentricity
)
View(whole_data)
smallecc_data = whole_data[whole_data$eccentricity == '1' ,]
# by eccentricity
tva_smallecc <- tva_data[tva_data$Eccentricity == 1 ,]
View(tva_smallecc)
tva_largeecc <- tva_data[tva_data$Eccentricity == 2 ,]
# small ecc set
whole_data_ecc5 <- cbind(
condition = tva_smallecc$Timing
, letter_duration = tva_smallecc$Letter_duration
, targets
, distractors
, response = tva_smallecc$response
, eccentricity = tva_smallecc$Eccentricity
)
View(whole_data_ecc5)
View(whole_data)
View(tva_largeecc)
##### small eccentricity set #####
# by eccentricity
tva_smallecc <- tva_data[tva_data$Eccentricity == 1 ,]
## Sort targets by position (1-3 top left - bot left, 4-6 top right - bot right)
positions <- tva_smallecc[, paste0("posLet", c(1:4))]
letters <- tva_smallecc[, paste0("L", c(1:4))]
t1 <- t(letters)[t(positions == "top left")]
t2 <- t(letters)[t(positions == "bot left")]
t3 <- t(letters)[t(positions == "top right")]
t4 <- t(letters)[t(positions == "bot right")]
targets <- paste0(t1, t2, t3, t4)
distractors <- rep("000000", length(tva_data$Block)) # No distractors in whole report condition
# small ecc set
whole_data_ecc5 <- cbind(
condition = tva_smallecc$Timing
, letter_duration = tva_smallecc$Letter_duration
, targets
, distractors
, response = tva_smallecc$response
, eccentricity = tva_smallecc$Eccentricity
)
View(whole_data_ecc5)
View(whole_data_ecc5)
View(tva_smallecc)
View(whole_data_ecc5)
View(tva_largeecc)
View(tva_smallecc)
## Sort targets by position (1-3 top left - bot left, 4-6 top right - bot right)
positions <- tva_smallecc[, paste0("posLet", c(1:4))]
letters <- tva_smallecc[, paste0("L", c(1:4))]
t1 <- t(letters)[t(positions == "top left")]
t2 <- t(letters)[t(positions == "bot left")]
t3 <- t(letters)[t(positions == "top right")]
t4 <- t(letters)[t(positions == "bot right")]
targets <- paste0(t1, t2, t3, t4)
distractors <- rep("000000", length(tva_smallecc$Block)) # No distractors in whole report condition
# small ecc set
whole_data_ecc5 <- cbind(
condition = tva_smallecc$Timing
, letter_duration = tva_smallecc$Letter_duration
, targets
, distractors
, response = tva_smallecc$response
, eccentricity = tva_smallecc$Eccentricity
)
output.name3 <- paste0(filepath, filename, 'ecc3', '.dat')
output.name3
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricities.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
file
i
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricity.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA_eccentricity(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricity.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
View(x)
i
subset(exp_blocks)
write.table(length(exp_blocks$Block), file = output.name, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "/t", append = FALSE)
output.name
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricity.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
# by eccentricity
tva_smallecc <- tva_data[tva_data$Eccentricity == 1 ,]
exp_blocks <- subset(tva_smallecc, Block != 0) # Exclude practice trials
write.table(length(exp_blocks$Block), file = output.name3, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "/t", append = FALSE)
## Sort targets by position (1-3 top left - bot left, 4-6 top right - bot right)
positions <- tva_smallecc[, paste0("posLet", c(1:4))]
letters <- tva_smallecc[, paste0("L", c(1:4))]
t1 <- t(letters)[t(positions == "top left")]
t2 <- t(letters)[t(positions == "bot left")]
t3 <- t(letters)[t(positions == "top right")]
t4 <- t(letters)[t(positions == "bot right")]
targets <- paste0(t1, t2, t3, t4)
distractors <- rep("000000", length(tva_smallecc$Block)) # No distractors in whole report condition
# small ecc set
whole_data_ecc3 <- cbind(
condition = tva_smallecc$Timing
, letter_duration = tva_smallecc$Letter_duration
, targets
, distractors
, response = tva_smallecc$response
, eccentricity = tva_smallecc$Eccentricity
)
View(whole_data_ecc3)
## Write whole report data to file
write.table(whole_data_ecc3, file=output.name3, quote=FALSE, col.names=FALSE, row.names=FALSE, sep="\t", append=TRUE)
output.name3
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricity.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
warnings()
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricity.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA/"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA_eccentricity.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
# finding those that just have 'TVA' in the title
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
filename = gsub(".csv", "", i)
libTVA(i.tva, basename(filename), filepath = outputPath)
}
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
file = tva.files[i]
if (isTRUE(substr(basename(file), 16, 16)=="w")){
i_accuracies <- read.csv(paste0(dataPath, tva.files[i]))[c(10, 22)]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)), na.rm = TRUE)))
}
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
