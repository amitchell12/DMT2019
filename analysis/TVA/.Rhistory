i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA/") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA/") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA/") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA/") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA/") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva_accuracies$accuracy)
summary(tva_accuracies$accuracy)
rm(list=ls())
setwd("M:\Alex_Files\")
setwd("M:/Alex_Files/")
setwd("M:/git/DMT2019/analysis/TVA") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva_files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva.accuracies$accuracy)
summary(tva.accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva.accuracies$accuracy)
summary(tva.accuracies$accuracy)
View(i.tva)
libTVA <- function(x, filename, filepath) {
# Write trial number into the output file
output.name <- paste0(filepath, filename, ".dat")
exp_blocks <- subset(x, Block != 0) # Exclude practice trials
write.table(length(exp_blocks$Block), file = output.name, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t", append = FALSE)
for(cond in c(1:2))
tva_data <- subset(exp_blocks, exp_blocks$Eccentricity == cond)
tva_data$Letter_duration <- tva_data$Letter_duration # Correct to represent actual presentation times
tva_data[, paste0("L", 1:4)] <- apply(tva_data[, paste0("L", 1:4)], 2, as.character)
## Reformat responses (this should be fixed in OpenSesame!)
tva_data$response <- toupper(tva_data$response) # Convert to upper case
tva_data$response <- gsub(" ", "", tva_data$response)
tva_data$response[tva_data$response == "NONE" | tva_data$response == ""] <- "-" # Code missing as "-"
## Sort targets by position (1-3 top left - bot left, 4-6 top right - bot right)
positions <- tva_data[, paste0("posLet", c(1:4))]
letters <- tva_data[, paste0("L", c(1:4))]
t1 <- t(letters)[t(positions == "top left")]
t2 <- t(letters)[t(positions == "bot left")]
t3 <- t(letters)[t(positions == "top right")]
t4 <- t(letters)[t(positions == "bot right")]
targets <- paste0(t1, t2, t3, t4)
distractors <- rep("000000", length(tva_data$Block)) # No distractors in whole report condition
## Combine variables that are needed for the TVA parameter estimate
whole_data <- cbind(
condition = tva_data$Timing
, letter_duration = tva_data$Letter_duration
, targets
, distractors
, response = tva_data$response
, eccentricity = tva_data$Eccentricity
)
## Write whole report data to file
write.table(whole_data, file=output.name, quote=FALSE, col.names=FALSE, row.names=FALSE, sep="\t", append=TRUE)
}
}
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva.accuracies$accuracy)
summary(tva.accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva.accuracies$accuracy)
summary(tva.accuracies$accuracy)
View(i.tva)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva.accuracies$accuracy)
summary(tva.accuracies$accuracy)
###########################################################################################################
# Before running this script, make sure the file "convert_tva.r" is in the same directory as this script  #
# and set the following paths correctly!                                                                  #
###########################################################################################################
setwd("M:/git/DMT2019/analysis/TVA") # Enter path to
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/dataAnalysis/TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
# Screen accuracy data
tva_accuracies <- data.frame(subject_nr = NA, accuracy = NA)
for (i in 1:length(tva.files)) {
i_accuracies <- read.csv(paste0(raw_data_path, tva.files[i]))[seq(72, 468, 36), c("accumulated_accuracy", "subject_nr")]
tva_accuracies <- rbind(tva_accuracies, c(unique(i_accuracies$subject_nr), mean(as.numeric(as.character(i_accuracies$accumulated_accuracy)))))
}
boxplot(tva.accuracies$accuracy)
summary(tva.accuracies$accuracy)
dir.create
setwd("M:/git/DMT2019/DMT2019_rawdata/") # Enter path to
dir.create("formatted_TVA")
setwd("M:/git/DMT2019/DMT2019_rawdata/formatted_TVA")
setwd("M:/git/DMT2019/DMT2019_rawdata/") # Enter path to
dir.create("formatted_TVA")
setwd("M:/git/DMT2019/DMT2019_rawdata/formatted_TVA/")
setwd("M:/GitHub/DMT2019/DMT2019_rawdata/") # Enter path to
dir.create("formatted_TVA")
setwd("M:/GitHub/DMT2019/DMT2019_rawdata/formatted_TVA/")
setwd("M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/") # Enter path to
dir.create("formatted_TVA")
setwd("M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/")
#creating folder to sae data in
setwd("M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/") # Enter path to
dir.create("formatted_TVA")
#back to script WD
setwd("M:/GitHub/DMT2019/analysis/TVA/")
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/" # Enter directory to raw data
output_path <- "M:/Alex_Files/Experiments/DMT2019/DMT2019_rawdata/formatted_TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
for(i in tva.files) {
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
rm(list=ls())
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data") # Enter path to
dir.create("formatted_TVA")
#back to script WD
setwd(dataPath)
raw_data_path <- "M:/Alex_Files/Experiments/DMT2019/raw_data/" # Enter directory to raw data
output_path <- "S:/groups/DMT/data/formatted_TVA/" # Enter directory to save converted files to
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data") # Enter path to data
wPath <- "M:/Documents/GitHub/DMT2019/analysis/TVA"
outputPath <- "S:/groups/DMT/data/formatted_TVA/" # Enter directory to save converted files to
dir.create("formatted_TVA")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
setwd(wPath)
wPath <- "M:/GitHub/DMT2019/analysis/TVA"
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
tva.files <- list.files(raw_data_path, ".csv")
tva.files
cd(dataPath)
setwd(dataPath)
tva.files <- list.files(raw_data_path, ".csv")
tva.files
tva.files <- list.files(dataPath, ".csv")
tva.files
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
tva.files
# listing all .csv files in data path
filenames <- list.files(dataPath, ".csv", recursive = TRUE)
basename(tva.files[1])
basename(tva.files[6])
basename(tva.files[8])
basename(tva.files[10])
basename(tva.files[16])
basename(tva.files[17])
basename(tva.files[18])
basename(tva.files[19])
for(i in tva.files) {
if (isTRUE(substr(basename(file), 12, 12)=="T")){
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(raw_data_path, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
}
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA"
outputPath <- "S:/groups/DMT/data/formatted_TVA/" # Enter directory to save converted files to
dir.create("formatted_TVA")
#back to script WD
setwd(wPath)
# Prepare files for MatLab fitting
if(readline("Have you removed all previously converted files? [y/n] ") == "n") {
stop("Please delete or move the existing files.")
}
source("libTVA.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = output_path)
}
}
i
View(i.tva)
#creating folder to sae data in
dataPath <- ("S:/groups/DMT/data/") # Enter path to data
wPath <- "M:/GitHub/DMT2019/analysis/TVA"
# Enter directory to save converted files to
setwd(dataPath)
dir.create("formatted_TVA")
outputPath <- "S:/groups/DMT/data/formatted_TVA/"
#back to script WD
setwd(wPath)
source("libTVA.r")
# listing all .csv files in data path
tva.files <- list.files(dataPath, ".csv", recursive = TRUE)
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 12, 12)=="T")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
View(i.tva)
filename = gsub(".csv", "", i)
filename
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "/", i), filepath = outputPath)
}
}
outputPath <- ("S:/groups/DMT/data/formatted_TVA/")
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub(".csv", "", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub("", i), filepath = outputPath)
}
}
for(i in tva.files) {
if (isTRUE(substr(basename(i), 16, 16)=="w")){
i.tva <- read.csv(paste0(dataPath, tva.files[which(tva.files == i)]))
libTVA(i.tva, filename = gsub("", "", i), filepath = outputPath)
}
}
