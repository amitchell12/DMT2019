library(readr)
library(ggplot2)
library(Rmisc)
library(gridExtra)
#set working directory to where data is
anaPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching'
dataPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching/data'
setwd(dataPath)
#variable information
nParticipants = 1 #for testing
#nParticipants = 1:24 #for analysis
#make complete list of RESULTS files (trial information)
for (x in nParticipants){
ppID = sprintf("10%s", x)
ppPath = (file.path(dataPath, ppID))
resfiles = (path=dataPath, full.names=TRUE, recursive = FALSE,
include.dirs = FALSE, pattern = "*.csv")
}
#variable information
nParticipants = 2 #for testing
#nParticipants = 1:24 #for analysis
x in nParticipants
x = 1
ppID = sprintf("10%s", nParticipants[x])
#set working directory to where data is
anaPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching'
dataPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching/data'
setwd(dataPath)
library(readr)
library(ggplot2)
library(Rmisc)
library(gridExtra)
#set working directory to where data is
anaPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching'
dataPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching/data'
setwd(dataPath)
#variable information
nParticipants = 2 #for testing
#nParticipants = 1:24 #for analysis
#make complete list of RESULTS files (trial information)
for (x in nParticipants){
ppID = sprintf("10%s", nParticipants[x])
ppPath = (file.path(dataPath, ppID))
resfiles = (path=dataPath, full.names=TRUE, recursive = FALSE,
include.dirs = FALSE, pattern = "*.csv")
}
ppPath = (file.path(dataPath, ppID))
ppPath
resfiles = (path=ppPath, full.names=TRUE, recursive = FALSE,
include.dirs = FALSE, pattern = "*.csv")
#make complete list of RESULTS files (trial information)
for (x in nParticipants){
ppID = sprintf("10%s", nParticipants[x])
ppPath = (file.path(dataPath, ppID))
resfiles = list.files(path=ppPath, full.names=TRUE, recursive = FALSE,
include.dirs = FALSE, pattern = "*.csv")
}
resfiles
ppPath
x
#make complete list of RESULTS files (trial information)
for (x in nParticipants){
ppID = sprintf("10%s", x)
ppPath = (file.path(dataPath, ppID))
resfiles = list.files(path=ppPath, full.names=TRUE, recursive = FALSE,
include.dirs = FALSE, pattern = "*.csv")
}
resfiles
for(x in resfiles){
tmp <- read.csv(x)
}
read.csv(resfiles[1])
data = read.csv(resfiles[1])
View(data)
resfiles
str_extract(resfiles[1], "\\d")
installed.packages(stringr)
installed.packages(stringi)
installed.packages(substr)
install.packages(substr)
install.packages(string)
"stringr"
install.packages(stringr)
nchar(resfiles[1])
139-35
substr(resfiles[1], 104, nchar(resfiles[1]))
substr(resfiles[1], 95, nchar(resfiles[1]))
substr(resfiles[1], 94, nchar(resfiles[1]))
substr(resfiles[1], 93, nchar(resfiles[1]))
resfiles
clear
rm(list=ls())
library(readr)
library(ggplot2)
library(Rmisc)
library(gridExtra)
#set working directory to where data is
anaPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching'
dataPath <- '/Users/alexandramitchell/Documents/git/DMT2019/analysis/tablet_reaching/data'
setwd(dataPath)
#variable information
nParticipants = 2 #for testing
#nParticipants = 1:24 #for analysis
nTasks = 1:6 #total number of tasks - free + peripheral reaching, visual detection (non-dominant, dominant)
#make complete list of RESULTS files (trial information)
for (x in nParticipants){
ppID = sprintf("10%s", x)
ppPath = (file.path(dataPath, ppID))
resfiles = list.files(path=ppPath, full.names=TRUE, recursive = FALSE,
include.dirs = FALSE, pattern = "*.csv")
for (t in nTasks){
task_name = switch(t, "peripheral_l", "peripheral_r","free_l", "free_r",
"detection_l", "detection_r")
tmp <- read.csv(t)
}
}
tmp <- read.csv(resfiles[t])
View(tmp)
sprintf("%s_%s", ppID, task_name) <- tmp
sprintf("%s_%s", ppID, task_name)
sprintf("%s_%s", ppID, task_name) = tmp
(sprintf("%s_%s", ppID, task_name)) = tmp
is.numeric(sprintf("%s_%s", ppID, task_name)) = tmp
file_name = sprintf("%s_%s", ppID, task_name)
assign(file_name, tmp)
