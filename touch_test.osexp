---
API: 2.1
OpenSesame: 3.2.7b1
Platform: posix
---
set width 1920
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 1080
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "/home/experimenter/git/DMT_pointing"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set background black

define synth beep
	set volume 1
	set pan 0
	set osc sine
	set length 100
	set freq 440
	set duration sound
	set description "A basic sound synthesizer"
	set decay 5
	set attack 0

define sketchpad blank
	# code that means space can be used as esc key
	set duration 0
	set description "Displays stimuli"

define mouse_response circle_mouse_response
	set timeout infinite
	set show_cursor yes
	set linked_sketchpad circle_stimulus
	set flush yes
	set event_type mouseclick
	set duration mouseclick
	set description "Collects mouse responses"

define sketchpad circle_stimulus
	set start_response_interval no
	set reset_variables no
	set duration 500
	set description "Displays stimuli"

define inline_script committed
	set description "Executes Python code"
	set _run "committed = True"
	set _prepare ""

define inline_script emergency_exit
	set description "Executes Python code"
	___run__
	# adding an 'exit' key for the experiment
	# think script is the best way to go for this - need to find a way of getting key information
	# extract key press here and determine whether there is a way I can use a key to exit
	if exp.response == 'space':
		var.breaking_variable = False
	__end__
	set _prepare ""

define sketchpad end
	set duration mouseclick
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="Thank you for taking part<br /><br />Touch the screen to end the experiment" x=0 y=0 z_index=0

define keyboard_response end_experiment_key
	set timeout 0
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set correct_response end_experiment
	set allowed_responses "+"

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run global_prep always
	run intro always
	run trial_loop always
	run end always

define inline_script experiment_script
	set description "Executes Python code"
	___run__
	# in case mouse is pressed when we get here
	wait_while_lmb_pressed(True)
	
	# wait for "mouse down" i.e. touch
	wait_while_lmb_pressed(False)
	
	t0 = clock.time()
	
	# hide target
	blank.run()
	
	# wait for "mouse up"
	wait_while_lmb_pressed(True,timeout=500,bounds=target_bounds)
	
	elapsed = clock.time() - t0
	
	committed = False
	__end__
	___prepare__
	circle_string = 'draw circle x={} y={} r=50 fill=1 color=white'.format(var.x,var.y)
	stim.elements = [sketchpad_elements.circle(stim,circle_string)]
	
	tr = target.elements[0].eval_properties()
	target_bounds = (tr['x'], tr['y'], tr['x']+tr['w'], tr['y']+tr['h'])
	__end__

define inline_script global_prep
	set description "Executes Python code"
	___run__
				
	# getting information about degrees visual angle
	from math import atan2, degrees
	h = 18 #monitor height in cm
	d = 40 #distance between pp and monitor
	r = 1080 #vertical resolution of monitor
	deg_perPix = degrees(atan2(.5*h, d))/(.5*r)
	
	fixDist_pix = -900 #maximum distance of fixation target
	targetSize_pix = 64 #size of target in pixels
	fixDist = fixDist_pix*deg_perPix
	targetSize = targetSize_pix*deg_perPix #converting both fix target distance and size into deg
	centreFix = fixDist+(targetSize/2)
	
	target1deg = centreFix + 24
	target2deg = centreFix + 31
	target3deg = centreFix + 38 #defining target eccentricies from centre
	# converting to pixels for analysis
	target1Dist_pix = target1deg/deg_perPix
	target2Dist_pix = target2deg/deg_perPix
	target3Dist_pix = target3deg/deg_perPix
	__end__
	___prepare__
	# prepare steps that only need to happen once
	
	import csv
	
	from libopensesame import sketchpad_elements
	from openexp.keyboard import keyboard
	
	m = Mouse()
	myKeys = keyboard(exp, keylist=['space'])
	var.breaking_variable = True #for emergency exit
	#setting up exit experiment back-stop
	
	stim, response = items['circle_stimulus'], items['circle_mouse_response']
	beep = items['beep']
	blank = items['blank']
	target = items['target']
	
	def in_bounds(x,y,bounds):
		left, top, right, bottom = bounds
		return x > left and x < right and y > top and y < bottom
	
	def wait_while_lmb_pressed(pressed, timeout=None, bounds=None):
	
		"""
		pressed == True : wait while mouse left button pressed,
		within bounds if present
		pressed == False : wait while mouse left button not pressed
		bounds as (left, top, right, bottom)
		"""
		t0 = clock.time()
		while m.get_pressed()[0] == pressed:
			if pressed and bounds:
				(x, y), time = m.get_pos()
				if not in_bounds(x, y, bounds):
					break
			clock.sleep(1)
			if timeout and clock.time() - t0 >= timeout:
				break
	__end__

define sketchpad intro
	set duration mouseclick
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="Welcome to the experiment<br /><br />Touch the screen to start" x=0 y=0 z_index=0

define logger logger
	set description "Logs experimental data"
	set auto_log yes

define sketchpad loop_end
	set duration mouseclick
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=response text="You have quit this experiment - click the mouse to quit" x=0 y=0 z_index=0

define sketchpad pause1
	set duration 500
	set description "Displays stimuli"

define sketchpad pause2
	set duration 500
	set description "Displays stimuli"

define repeat_cycle repeat
	set description "Optionally repeat a cycle from a loop"
	set condition always

define repeat_cycle repeat_if_lifted
	set description "Optionally repeat a cycle from a loop"
	set condition "=not m.get_pressed()[0]"

define repeat_cycle repeat_if_short
	set description "Optionally repeat a cycle from a loop"
	set condition "=elapsed < 500"

define sketchpad target
	set duration 0
	set description "Displays stimuli"
	draw rect color=white fill=0 h=64 penwidth=5 show_if=always w=64 x=-900 y=-32 z_index=0

define loop trial_loop
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 9
	set continuous no
	set break_if_on_first yes
	set break_if "[breaking_variable] = False"
	setcycle 0 x 154.05
	setcycle 0 y 0
	setcycle 1 x 154.05
	setcycle 1 y 128
	setcycle 2 x 154.05
	setcycle 2 y -128
	setcycle 3 x 452.15
	setcycle 3 y 0
	setcycle 4 x 452.15
	setcycle 4 y 128
	setcycle 5 x 452.15
	setcycle 5 y -128
	setcycle 6 x 750.25
	setcycle 6 y 0
	setcycle 7 x 750.25
	setcycle 7 y 128
	setcycle 8 x 750.25
	setcycle 8 y -128
	run trial_sequence

define sequence trial_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run blank always
	run target always
	run experiment_script always
	run circle_stimulus "=elapsed >= 500 and m.get_pressed()[0]"
	run beep "=elapsed >= 500 and m.get_pressed()[0]"
	run committed "=elapsed >= 500 and m.get_pressed()[0]"
	run circle_mouse_response "=committed"
	run pause2 "=committed"
	run emergency_exit always
	run logger "=committed"
	run repeat "=not committed"

